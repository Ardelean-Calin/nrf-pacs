use std::fs;
use xshell::cmd;

pub static PACS: &[(&str, &str)] = &[
    ("nrf51", "thumbv6m-none-eabi"),
    ("nrf52805", "thumbv7em-none-eabi"),
    ("nrf52810", "thumbv7em-none-eabi"),
    ("nrf52811", "thumbv7em-none-eabi"),
    ("nrf52820", "thumbv7em-none-eabi"),
    ("nrf52832", "thumbv7em-none-eabihf"),
    ("nrf52833", "thumbv7em-none-eabihf"),
    ("nrf52840", "thumbv7em-none-eabihf"),
    ("nrf5340-app", "thumbv8m.main-none-eabihf"),
    ("nrf5340-net", "thumbv8m.main-none-eabihf"),
    ("nrf9160", "thumbv8m.main-none-eabihf"),
];

pub fn install_tools() {
    // Install embedded Rust targets.
    let mut targets = PACS.iter().map(|(_, target)| *target).collect::<Vec<_>>();
    targets.sort();
    targets.dedup();

    cmd!("rustup target add {targets...}").run().unwrap();

    // Install meta-dependencies used for generating the crates.
    let toml = fs::read_to_string("Cargo.toml").unwrap();
    let mut metadeps = Vec::new();
    for line in toml.lines() {
        if line.starts_with("# @") {
            let parts = line[3..].split('=').collect::<Vec<_>>();
            match &*parts {
                [name, version] => {
                    metadeps.push((name.trim(), version.trim()));
                }
                _ => panic!("malformed metadep line: {}", line),
            }
        }
    }

    for (name, version) in metadeps {
        println!("installing {} {}", name, version);
        cmd!("cargo install {name} --version {version}")
            .run()
            .unwrap();
    }
}

pub fn generate() {
    install_tools();

    let template_toml = fs::read_to_string("Cargo.template.toml").unwrap();

    for (pac, _target) in PACS {
        let svd_path = format!("svds/{}.svd", pac);
        let crate_dir = format!("pacs/{}-pac", pac);
        fs::create_dir_all(&crate_dir).unwrap();

        cmd!("svd2rust -i {svd_path} -o {crate_dir}").run().unwrap();
        cmd!("form -i {crate_dir}/lib.rs -o {crate_dir}/src")
            .run()
            .unwrap();
        fs::remove_file(format!("{}/lib.rs", crate_dir)).unwrap();

        let mut cargo_toml = "# Generated by `cargo xtask`. Do not edit.".to_string();
        cargo_toml.push_str(&template_toml.replace("{{NAME}}", pac));
        fs::write(format!("{}/Cargo.toml", crate_dir), cargo_toml).unwrap();
    }

    cmd!("cargo fmt").run().unwrap();
}
